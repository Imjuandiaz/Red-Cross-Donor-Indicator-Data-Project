# -*- coding: utf-8 -*-
"""Red Cross Cluster

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ii-Ak9GMDbXNTNXzQgUftbMGJwZc-H8a
"""

#code snippet 1
#Installing h2o
!pip install h2o

#code snippet 2
#Importing h2o
import h2o

#initialize h2o
h2o.init()

# Code snippet 3
# Importing dataset
data = h2o.import_file('https://raw.githubusercontent.com/Imjuandiaz/Red-Cross-Donor-Indicator-Data-Project/refs/heads/main/Data/Red%20Cross%20DonorIndicator%20Clean%20Version%20-%20Sheet1.csv')


data

#code snippet 4
#Importing Kmeans Estimator
from h2o.estimators.kmeans import H2OKMeansEstimator

#code snippet 5
#setting the number of clusters in the data train as 4
kmeans_model = H2OKMeansEstimator(k=3)

#Train the clustering model
kmeans_model.train(training_frame=data)

#code snippet 6
#Displaying the cluster size
kmeans_model.size()

# Code Snippet 7
# Import libraries
import pandas as pd

# Predict clusters for each row
pred = kmeans_model.predict(data)

# Join prediction to the original dataset
data_with_clusters = data.cbind(pred)

# Convert to pandas DataFrame
df = data_with_clusters.as_data_frame()

# ==========================
# Numeric variables
# ==========================
numeric_cols = [
    "DonorAge", "IsAlumnusFlag", "IsParentFlag",
    "HasInvolvementFlag", "HasEmailFlag",
    "ConsecutiveDonorYears", "LastFiscalYearDonation",
    "Donation2FiscalYearsAgo", "Donation3FiscalYearsAgo",
    "Donation4FiscalYearsAgo", "Donation5FiscalYearsAgo",
    "CurrentFiscalYearDonation", "CumulativeDonationAmount",
    "DonorIndicatorFlag."
]

numeric_summary = df.groupby("predict")[numeric_cols].mean()

# ==========================
# Categorical variables
# ==========================
categorical_cols = [
    "DonorPostalCode", "GenderIdentity",
    "WealthRating", "PreferredAddressType"
]

categorical_summary = {}
for col in categorical_cols:
    categorical_summary[col] = (
        df.groupby("predict")[col]
        .value_counts(normalize=True)
        .unstack(fill_value=0)
    )

# ==========================
# Combinar resúmenes
# ==========================

# Unir todos los DataFrames de categorías en uno solo
categorical_df = pd.concat(categorical_summary.values(), axis=1)

# Combinar con las variables numéricas
cluster_profiles = numeric_summary.join(categorical_df, how="left")

# Exportar a CSV
cluster_profiles.to_csv("cluster_profiles.csv", index=True)

# Mostrar en consola
print(cluster_profiles)