# -*- coding: utf-8 -*-
"""Donor ML 21 Sep 2025

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/162_6VY_ZXPuyc7xCQpSeaAx23WGjtkeF

##DONOR INDICATOR AI/ML

#Importing DataSet
"""

# Code Snippet 1
# Import required libraries
import pandas as pd
import numpy as np

# Code Snippet 2
# Load dataset from URL
url = 'https://raw.githubusercontent.com/Imjuandiaz/Red-Cross-Donor-Indicator-Data-Project/refs/heads/main/Data/Donor%20Dataset%20-%202023%20.csv'
df = pd.read_csv(url)
df

"""#Featuring Engeeniering"""

# Code Snippet 3
# Drop columns with more than 20% missing values (except WealthRating)
df = df.drop(columns=["DonorDateOfBirth", "AcademicDegreeLevel", "MaritalStatus", "IsMemberFlag"])

# Code Snippet 4
# Drop non-predictive ID column
df = df.drop(columns=["DonorUniqueId"])

# Code Snippet 5
# Convert donation columns to numeric
donation_year_cols = [
    "LastFiscalYearDonation","Donation2FiscalYearsAgo",
    "Donation3FiscalYearsAgo","Donation4FiscalYearsAgo",
    "Donation5FiscalYearsAgo","CurrentFiscalYearDonation"
]
donation_all_cols = donation_year_cols + ["CumulativeDonationAmount"]

for col in donation_all_cols:
    df[col] = (
        df[col].astype(str)
        .str.replace(r"[\\$,]", "", regex=True)   # remove $ and commas
        .replace({"": "0", "nan": "0"})
        .astype(float)
    )

# Code Snippet 6
# Convert flag columns from Y/N to 0/1
flag_cols = [
    "IsAlumnusFlag","IsParentFlag",
    "HasInvolvementFlag","HasEmailFlag","DonorIndicatorFlag."
]

for col in flag_cols:
    df[col] = df[col].map({"Y":1,"N":0})
    df[col] = df[col].fillna(0)

# Code Snippet 7
# Clean DonorPostalCode (string only, no frequency encoding)

# Ensure postal code is a string
df["DonorPostalCode"] = df["DonorPostalCode"].astype(str)

# Replace "nan" or "NaN" with "Unknown"
df["DonorPostalCode"] = df["DonorPostalCode"].replace({"nan":"Unknown", "NaN":"Unknown"})

# Remove trailing ".0" if the code was imported as float (e.g., "23187.0" â†’ "23187")
df["DonorPostalCode"] = df["DonorPostalCode"].str.replace(r"\.0$", "", regex=True)

# Code Snippet 8
# Fill missing values
for col in df.select_dtypes(include=[np.number]).columns:
    df[col] = df[col].fillna(df[col].median())

for col in df.select_dtypes(include=["object"]).columns:
    df[col] = df[col].fillna("Unknown")

# Code Snippet 9
# Final check
print("Shape:", df.shape)
df.head()

# Code Snippet 9.1
!pip install pgeocode

import pgeocode

# Initialize US geocoder
nomi = pgeocode.Nominatim("us")

# Code Snippet 9.2 (create DonorState)
def zip_to_state(zip_code):
    try:
        # Query ZIP
        info = nomi.query_postal_code(zip_code)
        return info.state_code if pd.notnull(info.state_code) else "Unknown"
    except:
        return "Unknown"

df["DonorState"] = df["DonorPostalCode"].apply(zip_to_state)

#code snippet 10
#displaying data types
df.dtypes

#code snippet 11
#generating statistical analisys
df.describe()

"""#Correlation Analisys"""

#code snippet 12
#installing dython for correlation analysis
!pip install dython

#code snippet 13
#import dython for correlacion analisys
import dython
from dython.nominal import associations
corr = associations(df)

"""#AI/ML Model Testing Process"""

#code snippet 14
#installing pycaret to AI/ML model test
!pip install pycaret

#code snippet 15
#setting up the classification pycaret ML model
from pycaret.classification import *

#code snippet 16
#displaying data dtypes
df.dtypes

# Code snippet 17
# Setting the target variable
y = 'DonorIndicatorFlag.'

# Code snippet 18
# Setting the ignored variables(noise variables, redundant variables,  variables that are missing more than 20% data etc)
ignored_cols = ['CumulativeDonationAmount'
     ]

# Code snippet 19
# Setting the numerical variables
num_cols = [ 'HasInvolvementFlag','DonorAge', 'IsAlumnusFlag',
       'IsParentFlag', 'HasEmailFlag',
       'LastFiscalYearDonation', 'Donation2FiscalYearsAgo',
       'Donation3FiscalYearsAgo', 'Donation4FiscalYearsAgo',
       'Donation5FiscalYearsAgo', 'CurrentFiscalYearDonation', 'ConsecutiveDonorYears'
       ]

# Code snippet 20
# Setting the categorical variables
cat_cols = [  'GenderIdentity', 'WealthRating','DonorPostalCode',
       'PreferredAddressType','DonorState']

# Code snippet 21
# Setting up/configuring the pycaret setup for Classification ML modeling
classification_setup = setup(df,
                        target = y,
                        ignore_features = ignored_cols,
                        categorical_features = cat_cols,
                        numeric_features = num_cols, train_size = 0.7)

"""#Compare ML models"""

#code snippet 22
# Running pycaret to invoke ML algorithms
compare_models()

"""#Best Model"""

#code snippet 23
#savin the best model to test
best_model = create_model('qda')

# Code snippet 24
# Predicting 'eBook Subscriber Flag' on a dataset
predictions = predict_model(best_model, df)

# Code snippet 25
# Exporting predictions to a csv file
predictions.to_csv('qda Donor predictions.csv')

# Code Snippet 26
# Plot the confusion matrix for the Best Model
plot_model(best_model, plot="confusion_matrix")

# Code Snippet 27
# Plot the ROC curve (AUC) for the Best Model
plot_model(best_model, plot="auc")

# Code Snippet 29
# Plot the Precision-Recall curve
plot_model(best_model, plot="pr")

# Code Snippet 30
# Plot the class prediction error
plot_model(best_model, plot="error")

# Code Snippet 31
# Plot the learning curve
plot_model(best_model, plot="learning")

# Code Snippet 32
# Plot the calibration curve
plot_model(best_model, plot="calibration")